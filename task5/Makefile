# Makefile for WHILE compiler 
# Usage:
#   make            # build release (default)
#   make debug      # build with -g and no optimizations
#   make run ARGS=examples.while   # run parser on a file/stdin
#   make clean      # remove build artifacts

CXX       ?= g++
CXXFLAGS  ?= -std=c++17 -Isrc -MMD -MP
LDFLAGS   ?= 
RELEASE_FLAGS = -O2 -DNDEBUG
DEBUG_FLAGS   = -O0 -g3

SRC_DIR   := src
BUILD_DIR := build
BIN_DIR   := bin
TARGET    := $(BIN_DIR)/whilec

# source files
SRCS := $(wildcard $(SRC_DIR)/*.cpp)

# object/deps mapping
OBJS := $(patsubst $(SRC_DIR)/%.cpp,$(BUILD_DIR)/%.o,$(SRCS))
DEPS := $(OBJS:.o=.d)

# default build: release
all: CXXFLAGS += $(RELEASE_FLAGS)
all: dirs $(TARGET)

# debug build
debug: CXXFLAGS += $(DEBUG_FLAGS)
debug: dirs $(TARGET)

# link
$(TARGET): $(OBJS)
	@mkdir -p $(BIN_DIR)
	$(CXX) $(OBJS) -o $@ $(LDFLAGS)
	@echo "Built $@"

# compile each .cpp -> .o
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.cpp
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# convenience: ensure directories exist
.PHONY: dirs
dirs:
	@mkdir -p $(BUILD_DIR) $(BIN_DIR)

# run the binary (pass ARGS="file.while" to read from file)
.PHONY: run
run: all
	$(TARGET) $(ARGS)

# optional: render DOT to PDF if Graphviz is installed
# requires: ast.dot generated by running the parser
.PHONY: dot
dot:
	@if command -v dot >/dev/null 2>&1; then \
		dot -Tpdf ast.dot -o ast.pdf && echo "ast.pdf generated"; \
	else \
		echo "Graphviz 'dot' not found. Install graphviz to use 'make dot'."; \
	fi

.PHONY: clean
clean:
	$(RM) -r $(BUILD_DIR) $(BIN_DIR) ast.dot ast.pdf

# include auto-generated dependencies
-include $(DEPS)

# GoogleTest (in third_party/googletest)
GTEST_DIR    := ../third_party/googletest/googletest
GTEST_INC    := $(GTEST_DIR)/include
GTEST_SRC    := $(GTEST_DIR)/src/gtest-all.cc

GTEST_BUILD_DIR := $(BUILD_DIR)/gtest
GTEST_OBJS      := $(GTEST_BUILD_DIR)/gtest-all.o
GTEST_LIB       := $(GTEST_BUILD_DIR)/libgtest.a

# compile gtest's single translation unit
$(GTEST_BUILD_DIR)/gtest-all.o: $(GTEST_SRC)
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -isystem $(GTEST_INC) -I$(GTEST_DIR) -c $< -o $@

# static archive
$(GTEST_LIB): $(GTEST_OBJS)
	@mkdir -p $(dir $@)
	ar rcs $@ $^

# test binary
TEST_BIN := $(BIN_DIR)/unit_tests
TEST_SRCS := tests/auto_test.cpp

$(TEST_BIN): all $(GTEST_LIB) $(TEST_SRCS)
	@mkdir -p $(BIN_DIR)
	$(CXX) $(CXXFLAGS) -isystem $(GTEST_INC) $(TEST_SRCS) $(GTEST_LIB) -lpthread -o $@

.PHONY: test
test: $(TEST_BIN)
	$(TEST_BIN)
.PHONY: clean-test
clean-test:
	$(RM) -f wh out_program.s
	@if [ -d "build/tests" ]; then \
	  $(RM) -r build/tests; \
	fi
